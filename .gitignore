import pyaudio
import wave
import sqlite3
import time
# Algumas bibliotecas tem que ser instaladas no Terminal

# Configurações do áudio
FORMATO = pyaudio.paInt16  
CANAIS = 1  
TAXA_AMOSTRAGEM = 44100  
TAMANHO_BUFFER = 1024  

# Criar banco de dados e tabela
def criar_banco():
    conexao = sqlite3.connect("voz.db")
    cursor = conexao.cursor()
    
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS audios (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        nome TEXT,
        audio BLOB
    )
    """)
    
    conexao.commit()
    conexao.close()

# Gravar áudio e armazenar no banco de dados
def gravar_e_salvar(duracao, nome_arquivo):
    audio = pyaudio.PyAudio()
    
    stream = audio.open(format=FORMATO, channels=CANAIS,
                        rate=TAXA_AMOSTRAGEM, input=True,
                        frames_per_buffer=TAMANHO_BUFFER)

    print(f"Iniciando gravação de {duracao} segundos...")

    frames = []
    inicio = time.time()
    contador_buffers = 0

    for _ in range(0, int(TAXA_AMOSTRAGEM / TAMANHO_BUFFER * duracao)):
        data = stream.read(TAMANHO_BUFFER)
        frames.append(data)
        contador_buffers += 1
        tempo_passado = time.time() - inicio
        print(f"Tempo: {tempo_passado:.2f}s | Buffers usados: {contador_buffers}", end="\r")

    print("\nGravação finalizada.")

    stream.stop_stream()
    stream.close()
    audio.terminate()

    # Salvar o áudio temporariamente como arquivo
    with wave.open(nome_arquivo, 'wb') as wf:
        wf.setnchannels(CANAIS)
        wf.setsampwidth(audio.get_sample_size(FORMATO))
        wf.setframerate(TAXA_AMOSTRAGEM)
        wf.writeframes(b''.join(frames))

    # Armazenar no banco de dados
    with open(nome_arquivo, 'rb') as f:
        dados_audio = f.read()

    conexao = sqlite3.connect("voz.db")
    cursor = conexao.cursor()
    
    cursor.execute("INSERT INTO audios (nome, audio) VALUES (?, ?)", 
                   (nome_arquivo, dados_audio))

    conexao.commit()
    conexao.close()

    print(f"Áudio salvo no banco de dados! Total de buffers: {contador_buffers}")

# Recuperar e salvar áudio de volta
def recuperar_audio(id_audio, nome_arquivo_saida):
    conexao = sqlite3.connect("voz.db")
    cursor = conexao.cursor()

    cursor.execute("SELECT audio FROM audios WHERE id = ?", (id_audio,))
    resultado = cursor.fetchone()

    if resultado:
        with open(nome_arquivo_saida, 'wb') as f:
            f.write(resultado[0])
        print("Áudio recuperado e salvo como:", nome_arquivo_saida)
    else:
        print("Áudio não encontrado.")

    conexao.close()

# Criar o banco de dados (se não existir)
criar_banco()

# Gravar e armazenar áudio no banco
gravar_e_salvar(duracao=10, nome_arquivo="voz_pessoa.wav")

# Recuperar o áudio e salvar de volta em um arquivo
recuperar_audio(1, "audio_recuperado.wav")
